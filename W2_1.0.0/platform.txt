# W2 platform
# ------------------------------

# The information about this Arduino compatible environment
# ---------
name=W2
version=1.0.0

# Build related core definitions
# ---------
build.core.path ={runtime.platform.path}/cores
build.variant.path ={runtime.platform.path}/variants
build.assembly_file ={runtime.platform.path}/variants/entry4romload.s {runtime.platform.path}/variants/isr.s {runtime.platform.path}/variants/io.s

# Toolchain binaries
# ---------
compiler.path={runtime.tools.mips-mti-elf.path}/bin/
compiler.c.cmd=mips-mti-elf-gcc
compiler.cpp.cmd=mips-mti-elf-g++
compiler.size.cmd=mips-mti-elf-size
compiler.S.cmd=mips-mti-elf-as
compiler.c.elf.cmd = mips-mti-elf-ld
compiler.ar.cmd=mips-mti-elf-ar
compiler.elf2hex.cmd=flashconvert
compiler.support.path = -I {runtime.platform.path}/W2 -I {runtime.platform.path}/std -I {runtime.platform.path}/cores

# Toolchain definitions
# ---------

# Compiler definitions
compiler.warning_flags=-w
compiler.define=-DARDUINO=


# GCC related definitions
compiler.c.flags=-EL -DPRT_UART -msoft-float -march=mips1 -std=gnu99 -G 0 -c -Wa,-adhls

compiler.c.elf.flags=-EL -eentry -s -N -Ttext 10000000 -Tdata 01000010 -M

# G++ related definitions
compiler.cpp.flags=-EL -DPRT_UART -msoft-float -march=mips1 -G 0 -c -Wa,-adhls

# Assembler related definitions
compiler.S.flags=-EL -msoft-float 

# ar 
compiler.ar.flags= rcs

# Compile patterns
# ----------------

recipe.hooks.libraries.prebuild.1.pattern = "{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -o "{object_file}" "{runtime.platform.path}/variants/entry4romload.S" 

recipe.hooks.libraries.prebuild.2.pattern = "{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -o "{object_file}" "{runtime.platform.path}/variants/io.S"

recipe.hooks.libraries.prebuild.3.pattern = "{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -o "{object_file}" "{runtime.platform.path}/variants/sr.S"

## Compile C files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {compiler.support.path}  -o "{object_file}" "{source_file}"

## Compile C++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {compiler.support.path} -o "{object_file}" "{source_file}" 

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -o "{object_file}" "{source_file}" 

## Create archives
# archive_file_path={build.path}/{archive_file}
# recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"

# Linker patterns
# ----------------

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -o "{build.path}/{build.project_name}" {object_files}

# Create output files
# ----------------

## Create output (bin file)
recipe.objcopy.bin.pattern="{runtime.platform.path}/{compiler.elf2hex.cmd}" -l "{build.path}/{build.project_name}"

## Compute size
# ----------------

#recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A --common "{build.path}/{build.#project_name}.bin"
#recipe.size.regex=^(\.text|\.eh_frame)\s+([0-9]+).*
# Recipe to show SRAM size used
#recipe.size.regex.data=^(?:\.data|\.VENEER_Code|\.ram_code|\.bss|\.no_init|\Stack)\s+([0-9]+).*