# XMC platform
# ------------------------------
# For more info:
# https://arduino.github.io/arduino-cli/platform-specification/

# The information about this Arduino compatible environment
# ---------
name=XMC Family
version=1.6.0

# Build related core definitions
# ---------
build.core.path ={runtime.platform.path}/core
build.variant.path ={runtime.platform.path}/variants/{build.variant}
build.variant.config_path ={runtime.platform.path}/variants/{build.variant}/config/{build.board_variant}
build.flash_ld_path ={build.variant.path}/{build.flash_ld}
build.assembly_file ={build.variant.path}/Startup_{build.variant}.S

# Arduino boards.txt & Arduino IDE menu related definitions
# This can be overwritten/changed in boards.txt
# ---------
uart.selected=
build.menu_flags={uart.selected} {library.selected}

# Toolchain binaries
# ---------
compiler.path={runtime.tools.mips-mti-elf.path}/bin/
compiler.c.cmd=mips-mti-elf-gcc
compiler.cpp.cmd=mips-mti-elf-g++
compiler.size.cmd=mips-mti-elf-size
compiler.S.cmd=mips-mti-elf-as
compiler.c.elf.cmd = mips-mti-elf-ld
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.elf2hex.cmd=arm-none-eabi-objcopy

# Toolchain definitions
# ---------

# Compiler definitions
compiler.warning_flags=-w
compiler.define=-DARDUINO=


# GCC related definitions
compiler.c.flags=-mcpu={build.mcu} -mthumb -c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -MMD

#compiler.c.extra_flags=-ftime-report
compiler.c.extra_flags=

compiler.c.elf.flags=-Os -Wl,--gc-sections -save-temps
compiler.c.elf.extra_flags=

# G++ related definitions
compiler.cpp.flags=-mcpu={build.mcu} -mthumb -fpermissive -c -g -Os {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -MMD
#compiler.cpp.extra_flags=-ftime-report
compiler.cpp.extra_flags=

# Assembler related definitions
compiler.S.flags=-mcpu={build.mcu} -mthumb -c -g -x assembler-with-cpp
compiler.S.extra_flags=-w

# Compile patterns
# ----------------

## Compile C files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile C++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DXMC{build.board.version}_{build.board.type} -D{build.board_variant} -DF_CPU={build.f_cpu} -DARDUINO={build.board.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {build.menu_flags} {compiler.arm.cmsis.path} {compiler.avr_support.path} {compiler.usb.path} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DXMC{build.board.version}_{build.board.type} -D{build.board_variant} -DF_CPU={build.f_cpu} -DARDUINO={build.board.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {build.menu_flags} {compiler.arm.cmsis.path} {compiler.avr_support.path} {compiler.usb.path} {includes} "{source_file}" -o "{object_file}"

# Linker patterns
# ----------------

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" -mthumb --specs=nosys.specs --specs=nano.specs -mcpu={build.mcu} {compiler.c.elf.flags} "-T{build.flash_ld_path}" "-Wl,-Map,{build.path}/{build.project_name}.map" {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.elf" "-L{build.path}" -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align {object_files} "{build.path}/{archive_file}" -lm 

# Create output files
# ----------------

## Create output (bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags}"{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
# ----------------

recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A --common "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(\.text|\.eh_frame)\s+([0-9]+).*
# Recipe to show SRAM size used
recipe.size.regex.data=^(?:\.data|\.VENEER_Code|\.ram_code|\.bss|\.no_init|\Stack)\s+([0-9]+).*